{"name":"Lithe","tagline":"A browser-side script loader,compatible with the de facto standards(NodeJS/CommonJS).","body":"# Lithe\r\n\r\nA browser-side script loader,compatible with the de facto standards(NodeJS/CommonJS).\r\nIt's very simple and small,only 3.7kb gzipped.\r\n\r\n---\r\n\r\n## public api for browser\r\n\r\n### define\r\n\r\n```js\r\n//path/to/file.js\r\ndefine('path/to/file',function(require,exports,module){\r\n  var file = 'path/to/file.js';\r\n  exports.filename = 'file.js';\r\n  exports.filedir = 'path/to/';\r\n  /**\r\n   * module.exports = {\r\n   *    filename:'file.js',\r\n   *    filedir:'path/to'\r\n   * };\r\n   */\r\n});\r\n\r\n//if your project will not concat in one file to deploy,your can write:\r\n\r\ndefine(function(require){\r\n    \r\n});\r\n\r\n//the module id will be the file src path automatic. \r\n```\r\n\r\n### require\r\n\r\n```js\r\n//path/to/app.js\r\ndefine('path/to/app',function(require,exports,module){\r\n  var file = require('path/to/file');\r\n  console.log(file.filename); //file.js\r\n  console.log(file.filedir) //path/to\r\n  module.exports = 'i am app.js';\r\n});\r\n```\r\n### lithe.use\r\n\r\n```js\r\n//anywhere\r\nlithe.use('path/to/app',function(app){\r\n    console.log(app); // i am app.js\r\n});\r\n//or\r\nlithe.use('a.js','b.js',function(a,b){\r\n  //a and b has required;\r\n});\r\n```\r\n\r\n### lithe.start\r\n\r\n```js\r\n//if your project have not set data-main then you must be used the start function to make start.\r\nlithe.start('conf/file');\r\n```\r\n\r\n### config\r\n\r\n```js\r\ndefine('config',function(require,exports,module){\r\n   module.exports = {\r\n      //if your have a lot of project has many configs,you can configuration the namespace at here.\r\n      namespace:{\r\n          otherproject:{\r\n            basepath:\"http://otherproject.com/base/\",\r\n            config:\"config.js\"\r\n          }\r\n          //In your code you can write like this: require('otherproject:somemod');\r\n      },\r\n      //it will replace the real BASEPATH\r\n      base:'http://localhost/debug/path', \r\n      //for debug or update timestamp ? All javascript modules will be used\r\n      timestamp:new Date().valueOf(), \r\n      //logogram\r\n      alias:{\r\n        'app':'path/to/app',\r\n        'file':'path/to/file',\r\n        //Relative directory proxy\r\n        'UI':'../'\r\n      },\r\n      //if in the debug mode,the mainjs will be switch in there.\r\n      debugswitch:function(mainjs){\r\n            return 'some/new/path/mainjs';\r\n      }\r\n   };\r\n});\r\n\r\ndefine('someOtherJs',function(){\r\n  var app = require('app'),\r\n  file = require('file');\r\n  var othermod = require('otherproject:somemod');\r\n  //now the path/to/app and path/to/file has required\r\n});\r\n```\r\n\r\n## public api for node\r\n\r\n```js\r\n//npm install lithe\r\nvar lithe = require('lithe'),\r\ntool = lithe.tool,\r\nhfs = lithe.hfs,\r\noptions = tool.options;\r\n\r\noptions.basepath = 'your project base dir';\r\noptions.uglifyPath = 'your uglifyjs dir';\r\noptions.alias = {}; //your short alias config\r\n\r\n```\r\n\r\n### tool.findJsAllrequires([filepath]) \r\n\r\n```js\r\nvar requires = tool.findJsAllrequires('../app.js');\r\n//app.js's requires are findout and alias will be replaced  \r\n```\r\n### tool.concatFile([files],[target])\r\n\r\n```js\r\ntool.concatFile(['/path/to/file1.js','/path/to/file2.js'],'/path/to/file1&file2.js');\r\n//file1 and file2 will be merger\r\n```\r\n\r\n### tool.uglifyJs([filepath],[target])\r\n\r\n```js\r\ntool.uglifyJs('/path/to/file1&file2.js','path/to/file1&file2-min.js');\r\n//Equivalent uglifyjs --reserved-names require -o path/to/file1&file2-min.js /path/to/file1&file2.js\r\n```\r\n\r\n### hfs.cpdirSync([sourceDir],[targetDir])\r\n\r\n```js\r\nhfs.cpdirSync('/path/to/dir1','/path/to/dir2');\r\n//copy the folder by sync,if targetDir not exist it will be created.\r\n//.git and .svn will be continue.\r\n```\r\n\r\n### hfs.delSync([path])\r\n\r\n```js\r\nhfs.delSync('/path/to/dir');\r\nhfs.delSync('/path/to/file');\r\n//del the folder or file sync\r\n//.git and .svn will be continue.\r\n```\r\n\r\n### hfs.mkdirSync([target])\r\n\r\n```js\r\nhfs.mkdirSync('/path/dir')\r\n//if the '/path' folder not exist,it will be created.\r\n```\r\n\r\n### hfs.walk([path],[callback],[options])\r\n\r\n```js\r\nhfs.walk('/path/',function(files){\r\n    console.log(files); 'return path folder all js files';    \r\n},{\r\n    filter:function(file){\r\n\t  if (path.extname(el).indexOf('.js') > - 1) return true;\r\n    }\r\n});\r\n//it's worked sync\r\n```\r\n\r\n### hfs.writeFileSync([filepath],[data],[encoding = utf8])\r\n\r\n```js\r\nhfs.writeFileSync('/path/file',\"abcd\");\r\n//if path folder not exist,it will be created.\r\n```\r\n\r\n## How to deploy in the web browserï¼Ÿ\r\n\r\n```html\r\n<script src=\"lithe.js\"\r\n        data-config=\"config.js\"\r\n        data-path=\"http://domain.com/\"\r\n        data-debug=\"true\"\r\n        data-main=\"app.js\">\r\n</script>\r\n```\r\n## License\r\n\r\nBSD license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}